<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Varun Murkar - Product Designer]]></title><description><![CDATA[Product Designer. Brokering peace between designers and developers, one hand-off at a time.]]></description><link>https://varunmukar.com</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 06 Sep 2020 11:46:14 GMT</lastBuildDate><item><title><![CDATA[Why Good UX Designers Should Play Video Games - or at least, learn from them (Part 2)]]></title><description><![CDATA[How you can learn to make your designs more forgiving, reinforce behaviours you want, and how to not make your application into a maze.]]></description><link>https://varunmukar.com/posts/why-good-ux-designers-should-play-video-games-or-at-least-learn-from-them-part-2</link><guid isPermaLink="false">https://varunmukar.com/posts/why-good-ux-designers-should-play-video-games-or-at-least-learn-from-them-part-2</guid><pubDate>Sun, 22 Mar 2020 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;Read &lt;a href=&quot;2020-02-03---why-good-ux-designers-should-play-video-games-or-at-least-learn-from-them.md&quot;&gt;Part 1 here.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the last part we saw what we can learn from the way video games onboard users, introduce new elements, and create predictable patterns which users can use to make the most of their experience.&lt;/p&gt;
&lt;p&gt;Let’s look at a few more of these nuggets.&lt;/p&gt;
&lt;h2 id=&quot;skill-curves--casual-users-vs-power-users&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#skill-curves--casual-users-vs-power-users&quot; aria-label=&quot;skill curves  casual users vs power users permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Skill Curves / Casual Users vs Power Users&lt;/h2&gt;
&lt;p&gt;Remember Mortal Kombat? 4 simple actions - jump, crouch, kick, punch. As a beginner, you can mash the buttons enthusiastically enough to scrape a win.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media1.giphy.com/media/OCgTKYSVnf7iM/giphy.gif&quot; alt=&quot;FATALITY!&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A game released in 1992 figured this out, so you really have no excuse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, press those buttons in just the right sequence — and you get a combo. A stylish move which deals more damage, and makes you look cool while you do it. That precise timing, and memorising all those combos comes with time you put into familiarising with the game. &lt;/p&gt;
&lt;p&gt;The game won’t punish you for not being a pro. But it will scale to accomodate you when you become a badass. &lt;/p&gt;
&lt;p&gt;Let’s look at Excel once again. &lt;/p&gt;
&lt;p&gt;A college student would be able to use it, clicking around to move between cells, click around for basic functions like sums, differences, averages, etc. &lt;/p&gt;
&lt;p&gt;A hardcore accountant, on the other hand, would be able to belt out a full-fledged report (amazingly quickly) without ever touching the mouse. &lt;/p&gt;
&lt;p&gt;Keyboard shortcuts, handy power-user tricks, advanced functionality, all serve towards this purpose. Each application may have its own version of this. These aren’t always presented to the user upfront, as it would overwhelm them while starting out. But they’re always accessible, should your curiousity arise.&lt;/p&gt;
&lt;h2 id=&quot;coyote-time--tolerating-user-errors&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#coyote-time--tolerating-user-errors&quot; aria-label=&quot;coyote time  tolerating user errors permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Coyote Time / Tolerating User Errors&lt;/h2&gt;
&lt;p&gt;Ever had that jump in Super Mario where you jumped right at the edge of a platform, but the game dropped you down as if you didn’t?&lt;/p&gt;
&lt;p&gt;No you haven’t. Don’t make stuff up. &lt;/p&gt;
&lt;p&gt;Because these games implemented something called &lt;a href=&quot;https://www.youtube.com/watch?v=LeaaKRufdMc&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Coyote Time&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dcewboipbvgi2.cloudfront.net/sites/default/files/styles/article_hero_image/public/articles/11152012_WileECoyote_article.jpg?itok=uoq7Z9RX&quot; alt=&quot;Get the reference?&quot;&gt;&lt;/p&gt;
&lt;p&gt;How it works is by adding an extra bit of invisible platform at the end of what you see. So in case you jump a &lt;em&gt;little&lt;/em&gt; too late, that extra platform will prevent you from falling to your death, and the jump still works.&lt;/p&gt;
&lt;p&gt;Similarly, Metal Gear Solid gives you a second of slow-mo when you’re detected, to take down the enemy who’s about to raise the alarm.&lt;/p&gt;
&lt;p&gt;So how does this translate into UX? &lt;/p&gt;
&lt;p&gt;What you’re doing here is making your design more forgiving. You’re accounting for a potentially common error. &lt;/p&gt;
&lt;p&gt;Google noticed how many times people accidentally send emails before they’ve finished writing them. So Gmail got a time-limited Undo button for Send, Delete, and Archive, saving heaps of potential embarrasment for everyone using it. &lt;/p&gt;
&lt;p&gt;Is your user trying to do a destructive action? Make them confirm it.
Is your user making a purchase? Show them an overview of the order with the details.&lt;/p&gt;
&lt;p&gt;Don’t punish your users for making a mistake.&lt;/p&gt;
&lt;h2 id=&quot;positive-and-negative-feedback-loops&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#positive-and-negative-feedback-loops&quot; aria-label=&quot;positive and negative feedback loops permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Positive and Negative Feedback Loops&lt;/h2&gt;
&lt;p&gt;Hitman is a game where you play as Agent 47, a legendary assassin with boogeyman-level skills. You can either play in a way you live up to that legendary status, picking off your targets like a ghost who was never there, or you can play like Rambo. &lt;/p&gt;
&lt;p&gt;Take a guess which way the game is meant to be played. &lt;/p&gt;
&lt;p&gt;But, the game doesn’t punish you for going Rambo. Sure, it’ll make things difficult. You die pretty easily if shot. But it won’t instantly fail the mission if you’re detected (looking at you, Assassin’s Creed, with your annoying tailing missions).&lt;/p&gt;
&lt;p&gt;Instead, the game &lt;em&gt;rewards&lt;/em&gt; you for being stealthy, and playing it the way it was meant to be. This comes in the form of a higher score, unlockables, and achievements.&lt;/p&gt;
&lt;p&gt;Positive reinforcement. Neat, eh?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/pavlov-approves.jpg&quot; alt=&quot;Pavlov Approves&quot;&gt;&lt;/p&gt;
&lt;p&gt;What can we learn from this?&lt;/p&gt;
&lt;p&gt;Encourage the behaviour you want, instead of discouraging the behaviour you don’t want. &lt;/p&gt;
&lt;p&gt;Of course, there are right and wrong ways of doing this. You don’t want to be Candy Crush. I believe as designers we’re obligated to not use underhanded or unethical methods to get users to come back again and again. You want to make something engaging, not addictive. But that’s a topic for another time.&lt;/p&gt;
&lt;p&gt;A good example of this is what Todoist does with its Karma system. Completing tasks gives you karma points. As you accumulate more and more karma, you rise up in “levels”; 8 of these levels, from Beginner to Expert to ‘Enlightened’.&lt;/p&gt;
&lt;p&gt;See? Todoist essentially gamifies using the app to complete your tasks, without making it the reason you’re coming back. The encouragement works as positive trigger which makes you feel &lt;em&gt;good&lt;/em&gt; about using the app.&lt;/p&gt;
&lt;h2 id=&quot;why-uncharted-doesnt-need-a-compass&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-uncharted-doesnt-need-a-compass&quot; aria-label=&quot;why uncharted doesnt need a compass permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why Uncharted doesn’t need a compass&lt;/h2&gt;
&lt;p&gt;Uncharted is a game where you traverse ancient ruins and scenery to get to places and find things. The game, however, doesn’t tell you where to go.&lt;/p&gt;
&lt;p&gt;Uncharted, the Half Life series, and The Last of Us are notorious for not including a map or compass or waypoint markers on the screen. And yet, you’ll know. Check this out:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/guiding-using-light.jpg&quot; alt=&quot;Guiding using light&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/guiding-using-composition.jpg&quot; alt=&quot;Guiding using composition&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Courtesy of &lt;a href=&quot;https://www.youtube.com/watch?v=k70_jvVOcG0&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Game Maker’s Toolkit&lt;/a&gt;. Love the channel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The games use things like contrast and lighting to give you subconcious clues for things to move towards, like some GPS Jedi.&lt;/p&gt;
&lt;p&gt;Disneyland does this too, btw, to move you around the park. &lt;/p&gt;
&lt;p&gt;As Naughty Dog’s Lead Game Designer Emilia Schatz puts it, “It’s all about what your environment is telling the player”.&lt;/p&gt;
&lt;p&gt;Similarly, you have to pay attention to what your interface is telling your user. &lt;/p&gt;
&lt;p&gt;If you want to drive your user along a certain path in exploring your application, you have to ensure your design flows accordingly. Using colour and size to draw users’ attention to the things you want, you can nudge them to take the actions you want them to try out. Remove the clutter, make the next action obvious, and keep it in a place the user is going to look.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#wrapping-up&quot; aria-label=&quot;wrapping up permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;All of this sounds like common sense, doesn’t it? And yet, way too many designers make these mistakes, and can’t pinpoint what’s going wrong — because yeah, user research isn’t always going to tell you that. Especially if you don’t know what you’re doing. &lt;/p&gt;
&lt;p&gt;Maybe I’ll make that the next topic?&lt;/p&gt;
&lt;hr&gt;</content:encoded></item><item><title><![CDATA[Why Good UX Designers Should Play Video Games - or at least, learn from them (Part 1)]]></title><description><![CDATA[Super Mario, Halo, Uncharted, and more. Video games have often come up with the most intriguing solutions for user experience. Here's what we can learn from them, beyond 'grenades go BOOM'.]]></description><link>https://varunmukar.com/posts/why-good-ux-designers-should-play-video-games-or-at-least-learn-from-them-part-1</link><guid isPermaLink="false">https://varunmukar.com/posts/why-good-ux-designers-should-play-video-games-or-at-least-learn-from-them-part-1</guid><pubDate>Mon, 03 Feb 2020 23:46:37 GMT</pubDate><content:encoded>&lt;p&gt;Okay, I don’t mean like, to kill time while Adobe XD updates. I mean, learn from them. &lt;/p&gt;
&lt;p&gt;Yeah, learn from video games. &lt;/p&gt;
&lt;p&gt;Don’t snort in derision just yet. Hear me out. It’s gonna get nerdy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/l0IylOPCNkiqOgMyA/giphy.gif&quot; alt=&quot;It&amp;#x27;s about to get crazy&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;baby-steps--onboarding&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#baby-steps--onboarding&quot; aria-label=&quot;baby steps  onboarding permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Baby Steps / Onboarding&lt;/h2&gt;
&lt;p&gt;Whether it’s fast-paced action or a gripping storyline or both (Uncharted, you beauty), players don’t have the time or patience to understand complex mechanics, no matter how lovingly designed. &lt;/p&gt;
&lt;p&gt;Think back to the days of Super Mario. &lt;/p&gt;
&lt;p&gt;You start with an idyllic countryside in the background. As you move right (obviously), you see the first floaty-floaty brick for our Italian plumber to headbutt. Curious, you tentatively jump. Ah, the sweet &lt;em&gt;ding&lt;/em&gt; of your first coin collected. &lt;/p&gt;
&lt;p&gt;A little further ahead, you get your first mushroom. Oh, you’re bigger now. Neat. You see your first enemy. You instinctively jump over it. But 8-year-old you isn’t that coordinated yet. You touch the enemy. But that’s okay, the game says - it’s not punishing you. It’ll let you continue playing. It’ll just make you smaller again.&lt;/p&gt;
&lt;p&gt;8-year-old you could probably handle Worlds 1-5 no problem. &lt;/p&gt;
&lt;p&gt;Imagine, if instead the same made you start right back from the start of Level 1 when you died. 8-year-old you would be very, very annoyed. &lt;/p&gt;
&lt;p&gt;The point of this long-winded anecdote is how applications we design should handle onboarding. The reason games like Super Mario, Tomb Raider, Halo, etc. were so popular is that they were super effective in allowing even the newest players to enjoy the game. They didn’t assume you knew everything, and they didn’t overwhelm you by throwing everything at you at once. &lt;/p&gt;
&lt;p&gt;They held your hand as they took you through the basics, all while keeping you in the game, not a dumb tutorial level. &lt;/p&gt;
&lt;p&gt;They didn’t punish you for getting things wrong the first time. &lt;/p&gt;
&lt;p&gt;Speaking of which —&lt;/p&gt;
&lt;h2 id=&quot;sandboxing--introducing-new-features&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sandboxing--introducing-new-features&quot; aria-label=&quot;sandboxing  introducing new features permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sandboxing / Introducing new features&lt;/h2&gt;
&lt;p&gt;Let’s look at Half Life 2 as another example. Every time a new enemy is introduced, the game first shows it to you from a safe distance, with the means to dispose of it. &lt;/p&gt;
&lt;p&gt;For example, right before you first encounter the zombies, you enter a room to see a sawblade stuck in the opposite wall, pinning a zombie chopped in half with it. As you pick up a sawblade to move it out of your way using your Gravity Gun (the game already having shown you how to do that), a zombie shambles in front of you unexpectedly. You reflexively press the trigger, and the sawblade launches ahead, chopping the zombie in half. That’s the Petyr Baelish level of manipulation through which the game shows you the best way of dealing with the zombies.&lt;/p&gt;
&lt;h2 id=&quot;heuristics-aka-expectations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#heuristics-aka-expectations&quot; aria-label=&quot;heuristics aka expectations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Heuristics (a.k.a. expectations)&lt;/h2&gt;
&lt;p&gt;When Halo: Combat Evolved was released in 2001, it revolutionised first-person shooters. For example, players no longer had to cycle through their whole inventory to select a grenade, aim it, and then throw it. Instead, just hit one button, and the Master Chief would lob one wherever you were pointing.
This pioneered the gameplay mechanics for generations of games which would come after it.&lt;/p&gt;
&lt;p&gt;Sounds similar?&lt;/p&gt;
&lt;p&gt;That’s the genius of the game designers identifying a routine action, and simplifying it so the user can focus on tactical gameplay rather than fumbling with their keyboard for a simple action.&lt;/p&gt;
&lt;p&gt;Heuristics extend beyond “Delete should be red”. These design patterns, through repetition and prevelance, have let the users know what to expect. So when something doesn’t behave the way they expect, that creates a point of friction.&lt;/p&gt;
&lt;p&gt;This plays out in 2 parts. &lt;em&gt;Setting&lt;/em&gt; expectations, and then &lt;em&gt;ensuring&lt;/em&gt; those expectations are met every time.&lt;/p&gt;
&lt;h3 id=&quot;immersive-gameplay--setting-expectations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#immersive-gameplay--setting-expectations&quot; aria-label=&quot;immersive gameplay  setting expectations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Immersive Gameplay / Setting expectations&lt;/h3&gt;
&lt;p&gt;So you see, consistency goes beyond “all my buttons are the same size”. Your product has to &lt;em&gt;behave&lt;/em&gt; consistenty.&lt;/p&gt;
&lt;p&gt;Imagine you’re playing Skyrim, a game about dragons and magic set in a medieval pseudo-Nordic world, when suddenly, Thomas the Tank Engine rolls up in the hood. &lt;/p&gt;
&lt;p&gt;That’s what the gaming nerds call immersion-breaking. &lt;/p&gt;
&lt;p&gt;The example is exaggerated, but you get the point. &lt;/p&gt;
&lt;h3 id=&quot;emergent-gameplay--consistent-behaviour&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#emergent-gameplay--consistent-behaviour&quot; aria-label=&quot;emergent gameplay  consistent behaviour permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emergent Gameplay / Consistent Behaviour&lt;/h3&gt;
&lt;p&gt;When left to their own devices, players will form their own strategies/tactics for achieving their objective. For example, whether to clear out this next enemy camp like Rambo or like a stealthy ninja. &lt;/p&gt;
&lt;p&gt;But to do that, players have to be able to predict how each element of their plan is going to behave. Good games handle this masterfully.&lt;/p&gt;
&lt;p&gt;Take Halo for example. The lowly Grunts will almost always run away to their squad terrified when they see you or if their Elite commander is killed. The Elites will mostly charge at you in a rage when they’re about to die. The Hunters are always in pairs. If one dies, the other one will go berserk and trample everything in sight, its allies included. &lt;/p&gt;
&lt;p&gt;This behaviour is more or less consistent throughout the game. This allows players to plan their actions accordingly. Pinned down around a corner? Chuck a plasma grenade at a Grunt and watch it run towards its friends, taking them all out. Tight space and low on ammo? Just focus on taking out one Hunter and let the other one do the work for you in its grief. &lt;/p&gt;
&lt;p&gt;Now, imagine if an “Add” button in an app behaved differently on every other screen. Your user wouldn’t know what to expect, and would be unpleasantly surprised every single time. Until they eventually get too frustrated, uninstall your app, and if they’re having an extra-bad day, also give you a 1-star rating. &lt;/p&gt;
&lt;p&gt;Look at Excel. It doesn’t create “user flows” for every imaginable workflow. It gives you the building blocks. Ensures they behave consistently so you know what they’re going to do. And then like a good Desi dad, sets you on your way to do your thing with that knowledge. &lt;/p&gt;
&lt;p&gt;Sure, you won’t see it brag about winning a design award. But that’s the thing. Good design is invisible. It just works. &lt;/p&gt;
&lt;h2 id=&quot;in-part-2---&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#in-part-2---&quot; aria-label=&quot;in part 2    permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;In Part 2 —&lt;/h2&gt;
&lt;p&gt;This would end up being a loooooong read. So I decided to split this into parts. That way, if I figure out more things from video games in the future, I can just add another part (scalability, eh?)
&lt;img src=&quot;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/google/223/dancer_1f483.png&quot; alt=&quot;showing off like a coolio&quot;&gt;
In Part 2, let’s have a look at —&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How video games protect players from themselves&lt;/li&gt;
&lt;li&gt;Positive and negative feedback loops&lt;/li&gt;
&lt;li&gt;Why Uncharted doesn’t need a compass&lt;/li&gt;
&lt;li&gt;Coyote Time&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</content:encoded></item></channel></rss>